<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>图片测试</title>
    <url>/p/b211d196.html</url>
    <content><![CDATA[<h1 id="图片测试环节"><a href="#图片测试环节" class="headerlink" title="图片测试环节"></a>图片测试环节</h1><p><img src="/p/b211d196/testpic1.jpg" alt="b211d196" title="autumn"></p>]]></content>
      <categories>
        <category>初期测试存档</category>
      </categories>
  </entry>
  <entry>
    <title>测试文字计数功能</title>
    <url>/p/c0e26dd6.html</url>
    <content><![CDATA[<h1 id="测试文字计数功能"><a href="#测试文字计数功能" class="headerlink" title="测试文字计数功能"></a>测试文字计数功能</h1><p>正文部分<br>随便写点东西</p>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span></span><br><span class="line"><span class="built_in">test</span> 中文</span><br></pre></td></tr></table></figure>
<p><strong>加粗test</strong></p>
<p><del>横线test</del></p>
<p><em>斜体test</em></p>
<ul>
<li>list</li>
<li>list</li>
</ul>
<ol>
<li>Sorted list</li>
<li>Sorted list</li>
<li>Sorted list</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">code here</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new post First_Test</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: D:\&lt;user name&gt;\<span class="built_in">source</span>\_posts\2023-06-25-First-Test.md</span><br></pre></td></tr></table></figure>



<h1 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h1><h2 id="标题二"><a href="#标题二" class="headerlink" title="标题二"></a>标题二</h2><h3 id="标题三"><a href="#标题三" class="headerlink" title="标题三"></a>标题三</h3><h4 id="标题四"><a href="#标题四" class="headerlink" title="标题四"></a>标题四</h4><h5 id="标题五"><a href="#标题五" class="headerlink" title="标题五"></a>标题五</h5><p>\usepackage{mathtools}<br>\usepackage{amssymb}</p>
<p>$$m&#x3D; _{(n)}p$$<br>$$n\ |\ (m-p)$$<br>$$m-p&#x3D;kn$$<br>As $k$ is an integer.</p>
<p>There must exist a k that satisfied:<br>$$<br>k &#x3D; \lfloor \frac{m}{n} \rfloor - \lfloor \frac{p}{n} \rfloor<br>$$</p>
<p>\begin{alien*}</p>
<p>m-p&amp;&#x3D; (\lfloor \frac{m}{n} \rfloor - \lfloor \frac{p}{n} \rfloor)  n\</p>
<p>m - \lfloor \frac{m}{n} \rfloor n &#x3D; p - \lfloor \frac{p}{n} \rfloor n</p>
<p>m%n &#x3D; p%n</p>
<p>\end{alien*}</p>]]></content>
      <categories>
        <category>初期测试存档</category>
      </categories>
  </entry>
  <entry>
    <title>COMP9024学习笔记</title>
    <url>/p/826f1970.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2023T2，麦克教。不愧是著名好老师，上课很生动，口音清晰。算法都会在讲台上用投影仪直接手算一遍伪代码，给你看为什么会输出这个结果。上课体验极好，建议线下全勤。上课用的语言是c，对于我这种初学的人还蛮难的，尤其是分配内存、链表这一块。定义稍稍不谨慎就会报错，和python的便利性没法比，但是也可以帮助你更好的了解数据结构。（毕竟，自律都是罚出来的是不是（</p>
<span id="more"></span>

<h1 id="如何开始编c语言"><a href="#如何开始编c语言" class="headerlink" title="如何开始编c语言"></a>如何开始编c语言</h1><p>建议新手直接用学校的lab做作业。。附学校链接（我只保证链接在23年T2是能用的）<br><strong><a href="https://cgi.cse.unsw.edu.au/~cs9024/23T2/home_computing/windows.html">Windows用户点这里</a></strong><br><strong><a href="https://cgi.cse.unsw.edu.au/~cs9024/23T2/home_computing/mac.html">Mac用户点这里</a></strong></p>
<p>一般我是这样，首先去下一个VNCviewer（下载链接自己找咯）<br>安装完后双击打开<br>输入<code>vlab.cse.unsw.edu.au:5920</code>，点连接<br>输入zID和zPass，就到一个Linux环境了。这个环境交作业啥的都很方便<br>里面也有各种各样的软件，有VScode，有Jupiter。。留着自己探索吧</p>
<h1 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h1><p>我的评价是下载VScode<br>还要下一个c语言编译器，老师推荐gcc，附下载链接<br><strong><a href="https://sourceforge.net/projects/tdm-gcc/files/TDM-GCC%20Installer/tdm-gcc-webdl.exe/download">下载gcc点这里</a></strong><br>记得将gcc加入系统环境变量<br>以Win11为例：<br>找到<code>此电脑</code>，右键选择<code>属性</code>，<code>高级系统设置</code>，<code>环境变量</code><br>在<code>系统变量</code>中找到<code>Path</code><br><mark>请注意不是<code>Admin的用户变量</code></mark><br>双击<code>Path</code>或者点击<code>编辑</code>，<code>新建</code>，把<code>...\TDM-GCC-64\x86_64-w64-mingw32\bin</code>复制进去<br>最后把该目录下的<code>mingw32-make.exe</code>重命名为<code>make.exe</code>就可以在本地用老师给的makefile了</p>
<h1 id="期末抱佛脚复习部分"><a href="#期末抱佛脚复习部分" class="headerlink" title="期末抱佛脚复习部分"></a>期末抱佛脚复习部分</h1><h2 id="Week-1-Elementary-data-and-control-structures-in-C"><a href="#Week-1-Elementary-data-and-control-structures-in-C" class="headerlink" title="Week 1 Elementary data and control structures in C"></a>Week 1 Elementary data and control structures in C</h2><ol>
<li>浮点数<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">%x.yf   <span class="meta">#x为宽，y为精度</span></span><br></pre></td></tr></table></figure></li>
<li>在c中字符串是一个字符的数组，并且结尾是\0</li>
<li>scanf()、atoi()<br>atoi()可以将字符串转换为int类型</li>
<li>sum()求和函数<br>sum()需要知道数组中元素的个数<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sum(<span class="built_in">list</span>[], len(<span class="built_in">list</span>))</span><br></pre></td></tr></table></figure></li>
<li>多元数组<br>若 <code>q = [[0, 1], [2, 3]]</code><br>则 <code>print(q[0]);</code> #输出<code>&#123;0, 1&#125;</code></li>
<li>自定义数据结构类型<br>struct 可以打包不同类型的数据<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">       <span class="type">char</span> name[<span class="number">30</span>];</span><br><span class="line">       <span class="type">int</span>  zID;</span><br><span class="line">&#125; StudentT;</span><br></pre></td></tr></table></figure>
如果后续想要调用该复合类型<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">StudentT.zID</span><br><span class="line">StudentT.name</span><br></pre></td></tr></table></figure></li>
<li>struct需要的内存<br>不满足8字节的类型会填充至8字节<br>其余：<br>float型占8字节<br>int型占4字节</li>
<li>栈 LIFO（后进先出）<br>队列 FIFO（先进先出）</li>
<li>assert.h<br>assert可以在不满足条件时，直接弹出程序</li>
<li>static可以定义数据为本地类型</li>
</ol>
<h2 id="Week-2-Analysis-of-Algorithms"><a href="#Week-2-Analysis-of-Algorithms" class="headerlink" title="Week 2: Analysis of Algorithms"></a>Week 2: Analysis of Algorithms</h2><ol>
<li>时间复杂度O(n)<br>对于一个程序，假设它需要运行f(n)次<br>如果存在常数c，n<sub>0</sub>, 对于任给n &gt;&#x3D; n<sub>0</sub><br>使得f(n) &lt;&#x3D; c * g(n)成立<br>那么f(n) 属于O(g(n))<br>要使用n的最小次方</li>
<li>Binary Search 二分法<br>时间复杂度为log<sub>2</sub>n<br>但是由于对数的特性，底数不同差异很小<br>可以简写为log n</li>
<li>|Q|<br>这并不是绝对值的意思，是<code>栈</code>或<code>队列</code>的大小</li>
<li>Ω, Θ<br>Big Omega Ω<br>如果存在常数c，n<sub>0</sub>, 且n<sub>0</sub> &gt; 1, 对于任给n &gt;&#x3D; n<sub>0</sub><br>使得f(n) &gt;&#x3D; c * g(n)成立<br>Big Theta Θ<br>如果存在常数c<sub>1</sub>，n<sub>0</sub>, c<sub>2</sub>, 且n<sub>0</sub> &gt; 1, 对于任给n &gt;&#x3D; n<sub>0</sub><br>使得c<sub>1</sub> * g(n) &lt;&#x3D; f(n) &lt;&#x3D; c<sub>2</sub> * g(n)成立</li>
<li>链表 Linked List<br>每个格子都要有两个元素<br>（1）存储本身的数据<br>（2）指针，指向下一个数据的地址<br>每个链表的第一格head of list, 是指向该链表的指针<br>最后一格的指针，指向NULL。意为链表结束。<br>(睡醒施工)</li>
</ol>
<h2 id="Week-3-Dynamic-data-structures"><a href="#Week-3-Dynamic-data-structures" class="headerlink" title="Week 3: Dynamic data structures"></a>Week 3: Dynamic data structures</h2><h2 id="Week-4-Graph-data-structuresk"><a href="#Week-4-Graph-data-structuresk" class="headerlink" title="Week 4: Graph data structuresk"></a>Week 4: Graph data structuresk</h2><h2 id="Week-5-Graph-algorithms"><a href="#Week-5-Graph-algorithms" class="headerlink" title="Week 5: Graph algorithms"></a>Week 5: Graph algorithms</h2><h2 id="Week-7-Search-trees"><a href="#Week-7-Search-trees" class="headerlink" title="Week 7: Search trees"></a>Week 7: Search trees</h2><h2 id="Week-8-Search-tree-algorithms"><a href="#Week-8-Search-tree-algorithms" class="headerlink" title="Week 8: Search tree algorithms"></a>Week 8: Search tree algorithms</h2><h2 id="Week-9-Text-processing-algorithms-Approximation"><a href="#Week-9-Text-processing-algorithms-Approximation" class="headerlink" title="Week 9: Text processing algorithms, Approximation"></a>Week 9: Text processing algorithms, Approximation</h2><h2 id="Week-10-Randomised-algorithms"><a href="#Week-10-Randomised-algorithms" class="headerlink" title="Week 10: Randomised algorithms"></a>Week 10: Randomised algorithms</h2>]]></content>
      <categories>
        <category>学习笔记区</category>
      </categories>
  </entry>
  <entry>
    <title>COMP9021学习笔记</title>
    <url>/p/9f40aa63.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2023T2，马丁教的。个人感觉这门课很水（倒也是好事（学费：？））。就是很基础的python，应该是为了方便转码的同学设置的。上课体验不是很好，教案也没有，上课纯马丁炫技。马丁也有法式口音，在家看Lecture Record会有更好的体验（自动字幕太猛了）。但是。马丁真的很负责，很晚也会回邮件回论坛的问题。所以我给他好评。</p>
<span id="more"></span>

<h1 id="本地python环境安装"><a href="#本地python环境安装" class="headerlink" title="本地python环境安装"></a>本地python环境安装</h1><p>我用的Windows，Mac用户教不了（我没钱买）。个人建议无脑Anaconda。</p>
<ol>
<li><p><strong><a href="https://www.anaconda.com/download">点这里下载Anaconda</a></strong><br>（安装过程要非常的久，有几步卡个十几分钟是正常的）</p>
</li>
<li><p>安装完成后，在开始菜单找到Anaconda文件夹</p>
</li>
<li><p>单击Anaconda Navigator</p>
</li>
<li><p>在一阵弹窗过后选择JupiterLab，熟悉的窗口会自己弹出来了</p>
</li>
<li><p>没弹出来就自己在浏览器中输入 <a href="http://localhost:8888/lab">http://localhost:8888/lab</a><br>默认存储路径为<code>C:\Users\$用户名\</code></p>
</li>
</ol>
<p>.ipynb文件是马丁老师同款的python笔记本（我用来打草稿，Shift + Enter运行，也可以打断点调试，很好用)<br>.py是平时交作业用的格式，可以复制到Ed论坛试运行<br><mark>平时作业注意冒号后的空格（</mark></p>
<h1 id="期末抱佛脚复习部分"><a href="#期末抱佛脚复习部分" class="headerlink" title="期末抱佛脚复习部分"></a>期末抱佛脚复习部分</h1><p>我个人容易忘记的几句语法</p>
<ol>
<li>单个文件读取<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;文件名.txt&#x27;</span>) <span class="keyword">as</span> file:    <span class="comment">#默认当前路径</span></span><br><span class="line">    <span class="keyword">for</span> lines <span class="keyword">in</span> file:  <span class="comment">#不跳过空行操作</span></span><br><span class="line">        <span class="comment">#doing sth with lines</span></span><br></pre></td></tr></table></figure>
或者可以这样读取<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;文件名.txt&#x27;</span>) <span class="keyword">as</span> file:    <span class="comment">#默认当前路径</span></span><br><span class="line">    lines = file.read().split()  <span class="comment">#跳过空行，并且lines直接以列表存储，但不适用于文中有空格的情况</span></span><br><span class="line">    lines = file.read().split(<span class="string">&#x27;\n&#x27;</span>)  <span class="comment">#不跳过空行，并且lines直接以列表存储</span></span><br></pre></td></tr></table></figure>
如果文件是.csv的话<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;文件名.csv&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    reader = csv.reader(file)</span><br><span class="line">    <span class="comment">#输入下列语句可以查看前十行是个啥，顺带知道这个csv每列的标题是什么</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(reader)[:<span class="number">10</span>])</span><br><span class="line">    <span class="comment">#没有标题也可以自定义</span></span><br><span class="line">    <span class="keyword">for</span> title1, title2, title3... <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="comment">#doing sth with reader</span></span><br></pre></td></tr></table></figure></li>
<li>单个文件写入<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先要定义file_name和string是什么，可以直接用&#x27;字符串&#x27;的形式表示</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:  <span class="comment">#表示开启写入模式</span></span><br><span class="line">    file.write(string)    </span><br></pre></td></tr></table></figure></li>
<li>多个文件读取<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line">names_dir = Path(<span class="string">&#x27;文件夹名称&#x27;</span>)  <span class="comment">#这一步获取了文件夹的路径（考试一般也不会有重名的情况吧</span></span><br><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> <span class="built_in">sorted</span>(names_dir.glob(<span class="string">&#x27;*.txt&#x27;</span>)):   <span class="comment">#直接加一个sorted排好，自己看也方便</span></span><br><span class="line">    <span class="comment">#glob(&#x27;*.txt&#x27;)将文件夹中所有的文件名生成一个列表，也可以加别的限制条件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="comment">#剩下的就和上面的一样了</span></span><br></pre></td></tr></table></figure></li>
<li>浮点数<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)   <span class="comment">#可以表示无穷小，在最值问题可能会用到</span></span><br><span class="line">    <span class="comment">#（最值问题答案不一定只有1个，新建list输出）</span></span><br><span class="line"><span class="built_in">round</span>(<span class="built_in">float</span>(f), n)  <span class="comment">#f为浮点数，n为显示小数位数</span></span><br></pre></td></tr></table></figure></li>
<li>class, def, self<br>这块知识在学期末尾教，要赶很多作业所以学的不是很好<br>（据说马丁教是不会考这类知识的，只能赌一手他不考<br>这里直接复制别人的笔记，，<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#类名要大写</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>:</span><br><span class="line">    <span class="comment">#初始化</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, r, pi = <span class="number">3.14</span></span>):</span><br><span class="line">        <span class="comment">#类的属性</span></span><br><span class="line">        <span class="comment"># 一般带了self就不用return了，可以在其他函数直接调用</span></span><br><span class="line">        self.r = r</span><br><span class="line">        self.pi = pi</span><br><span class="line">        self.area = <span class="number">0.0</span></span><br><span class="line">        self.perimeter = <span class="number">0.0</span></span><br><span class="line">        <span class="comment">#计算面积（类的成员方法）</span></span><br><span class="line">        self.compute_area()</span><br><span class="line">        <span class="comment"># 计算周长（类的成员方法）</span></span><br><span class="line">        self.compute_perimeter()</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 计算面积（调用方法）</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute_area</span>(<span class="params">self</span>):</span><br><span class="line">        self.area = self.pi * self.r ** <span class="number">2</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">#计算周长</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute_perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        self.perimeter = <span class="number">2</span> * self.pi * self.r</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 判断相等</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> self.r == other.r:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 计算长度</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * self * r</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#字符串格式化</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Circle str r: <span class="subst">&#123;self.r&#125;</span>&quot;</span></span><br><span class="line">    <span class="comment">#represent</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Circle repr r: <span class="subst">&#123;self.r&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>
类的使用<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">circle1 = Circle(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 调用实例的属性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;面积是：&#x27;</span>, circle.area, <span class="string">&#x27;周长&#x27;</span>, circle1.perimeter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">circle1 = Circle(<span class="number">100</span>)</span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;面积是：&#x27;</span>, circle.area, <span class="string">&#x27;周长&#x27;</span>, circle2.perimeter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">circle2 = Circle(<span class="number">2101</span>, <span class="number">3.1415926</span>)</span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;面积是：&#x27;</span>, circle2.area, <span class="string">&#x27;周长&#x27;</span>, circle2.perimeter)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运算符重载，调用的__eq__()</span></span><br><span class="line">circle1 == circle2</span><br></pre></td></tr></table></figure></li>
<li>字符串运算<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string.replace(<span class="string">&#x27;字符串&#x27;</span>, <span class="string">&#x27;&#x27;</span>)    <span class="comment">#删除(替换)元素</span></span><br><span class="line">string.upper()    <span class="comment">#大写字母</span></span><br><span class="line">string.lower()    <span class="comment">#小写字母</span></span><br><span class="line">string.capitalize()    <span class="comment">#第一个字母大写，其余小写</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="考完更新"><a href="#考完更新" class="headerlink" title="考完更新"></a>考完更新</h1><p><mark>如下列分享有违规行为请立即联系<a href="mailto:&#100;&#x65;&#x61;&#x64;&#46;&#108;&#x65;&#x61;&#x66;&#46;&#x64;&#97;&#110;&#99;&#101;&#x40;&#103;&#109;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#109;">&#100;&#x65;&#x61;&#x64;&#46;&#108;&#x65;&#x61;&#x66;&#46;&#x64;&#97;&#110;&#99;&#101;&#x40;&#103;&#109;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#109;</a>删除</mark></p>
<p>线下期末中规中矩的考察，6道题都蛮简单的<br>题目都是英语，我这英语也不太行，应该就是这个意思（输入输出都是我自己编的<br><mark>留意老师的备注，看清是return输出，还是print()输出</mark></p>
<ol>
<li>输入字符串，去除重复<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入 aaaabbbbcccc</span></span><br><span class="line"><span class="comment"># 输出 abc</span></span><br></pre></td></tr></table></figure></li>
<li>伪高精度（我自己起的名字<br>设计一个函数(m, n)<br>默认 n &#x3D; 1<br>m除了第一位，每位数字都和n相加，加完取最后一位输出<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入 8</span></span><br><span class="line"><span class="comment"># 输出 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入 189012 1</span></span><br><span class="line"><span class="comment"># 输出 190123 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入 189012 -11</span></span><br><span class="line"><span class="comment"># 输出 178901</span></span><br></pre></td></tr></table></figure></li>
<li>输出列表<br>给一个list_of_lists[[]]<br>然后表中表的长度不变，输出升序<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入 [[]]</span></span><br><span class="line"><span class="comment"># 输出 [[]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入 [[5, 5, 3, 4]]</span></span><br><span class="line"><span class="comment"># 输出 [[3, 4, 5, 5]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入 [[5, 4], [0], [14, 40], [99, 1, 7]]</span></span><br><span class="line"><span class="comment"># 输出 [[0, 1], [4], [5, 7], [14, 40, 99]]</span></span><br></pre></td></tr></table></figure></li>
<li>输出字母金字塔<br>设计一个函数f(n)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入 1</span></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">A</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入 2</span></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"> A</span><br><span class="line">CBC</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入 4</span></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">   A</span><br><span class="line">  CBC</span><br><span class="line"> EDCDE</span><br><span class="line">GFEDEFG</span><br></pre></td></tr></table></figure></li>
<li>匹配字典<br>考生目录里会有一个dictionary.txt（全大写）<br>输入一句话（首字母大写），这句话可能会有空格，感叹号，分号，问号，冒号…共6种标点符号<br>找出这句话中，在字典里没出现过的单词<br>按字母个数输出一句话 + 列表<br>列表前有4个空格<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入 一句英文</span></span><br><span class="line"><span class="comment"># 输出 （大概就是输出这么一句话+一个列表，考完忘记了</span></span><br><span class="line">..<span class="number">.1</span> letter <span class="keyword">not</span> <span class="keyword">in</span> dictionary</span><br><span class="line">    [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]</span><br><span class="line">..<span class="number">.2</span> letter <span class="keyword">not</span> <span class="keyword">in</span> dictionary</span><br><span class="line">    [<span class="string">&#x27;BY&#x27;</span>, <span class="string">&#x27;AT&#x27;</span>]</span><br><span class="line">...以此类推</span><br></pre></td></tr></table></figure></li>
<li>经典grid<br>编样例太麻烦了我就不放了<br>题目里会随机生成一个里面是字母的grid，大小是dim * dim<br>输入一个字符串<br>找这个字符串在不在这个grid里面<br>可以横着找，竖着找，斜着找（对角线），三种方法。<br>只要有一个方法能行就输出True，三种都不行就输出False。</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记区</category>
      </categories>
  </entry>
  <entry>
    <title>COMP9321学习笔记</title>
    <url>/p/8e3dc01a.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2024T1, 这门网课作业挺有意思的，让你自己动手做一遍怎么调api，怎么用pandas。</p>
<span id="more"></span>]]></content>
      <categories>
        <category>学习笔记区</category>
      </categories>
  </entry>
</search>
